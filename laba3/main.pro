implement main
    open core, stdio, file

domains
    состояние = открыт; закрыт.
    тип_выручки = максимальная; минимальная.

class facts - factsDb
    кинотеатр : (integer Id, string Название, string Адрес, string Телефон, integer Количество_мест, состояние Статус) nondeterm.
    кинофильм : (integer Id, string Название, integer Год_выпуска, string Режиссер, string Жанр) nondeterm.
    показывают : (integer Id_кинотеатра, integer Id_фильма, string Дата, string Время, integer Выручка) nondeterm.

class predicates
    адрес_кинотеатра_по_жанру : (string Адрес, string Жанр) nondeterm anyflow.
    кинотеатр_по_фильму : (string Название, string Фильм) nondeterm anyflow.
    адреса_кинотеатров_по_режиссеру_и_жанру : (string Адрес, string Режиссер, string Жанр) nondeterm anyflow.
    адреса_открытых_или_закрытых_кинотеатров : (string Кинотеатр, string Адрес, состояние Статус) nondeterm anyflow.
    фильмы_в_кинотеатре : (string Кинотеатр, integer* Фильмы) nondeterm anyflow.
    длина : (integer*, integer, integer [out]) nondeterm.
    количество_фильмов_автора : (string Режиссер, integer Количество [out]) nondeterm.
    выручка_кинотеатра : (string Название_кинотеатра, integer Общая_выручка [out]) nondeterm.
    сумма_списка : (integer*, integer, integer [out]) nondeterm.
    средняя_выручка_всех_кинотеатров : (integer [out]) nondeterm.
    печать_кинотеатров : () nondeterm.
    поиск_кинотеатра_по_названию : (string Название_кинотеатра) nondeterm.
    печать_фильмов_по_кинотеатру : (integer Id) nondeterm.
    средняя_выручка_каждого_кинотеатра : (string Кинотеатр [out], integer Средняя_выручка [out]) nondeterm.
    вывод_средней_выручки_кинотеатров : () nondeterm.
    поиск_кинотеатров_по_улице : (string Улица) nondeterm.
    максимальная_выручка_кинотеатра : (string Название_кинотеатра, integer Макс_выручка [out]) nondeterm.
    минимальная_выручка_кинотеатра : (string Название_кинотеатра, integer Мин_выручка [out]) nondeterm.
    минимальное_значение_характеристики : (integer*, integer [out]) nondeterm.
    максимальное_значение_характеристики : (integer*, integer [out]) nondeterm.
    найти_нужную_выручку_кинотетров : (тип_выручки Тип_выручки) nondeterm.
    найти_кинотеатры_по_значению : (тип_выручки Тип_выручки) nondeterm.
    все_выручки : (integer [out]) nondeterm.
    соответвие_выручки : (string, integer) nondeterm.

clauses
    найти_кинотеатры_по_значению(Тип_выручки) :-
        Сумма_выручек_кинеатров = [ Общая_выручка || все_выручки(Общая_выручка) ],
        Тип_выручки = максимальная,
        кинотеатр(Id, Кинотеатр, _, _, _, _),
        максимальное_значение_характеристики(Сумма_выручек_кинеатров, Макс),
        соответвие_выручки(Кинотеатр, Макс),
        write('\nКинотетра с максимальной выручкой ', Кинотеатр, " Макс-общая-выручка ", Макс, "\n"),
        fail.

    найти_кинотеатры_по_значению(Тип_выручки) :-
        Сумма_выручек_кинеатров = [ Общая_выручка || все_выручки(Общая_выручка) ],
        Тип_выручки = минимальная,
        кинотеатр(Id, Кинотеатр, _, _, _, _),
        минимальное_значение_характеристики(Сумма_выручек_кинеатров, Мин),
        соответвие_выручки(Кинотеатр, Мин),
        write('\nКинотетра с минимальной выручкой ', Кинотеатр, " Макс-общая-выручка ", Мин, "\n"),
        fail.

    все_выручки(Общая_выручка) :-
        кинотеатр(Id, Кинотеатр, _, _, _, _),
        Выручки = [ Выручка || показывают(Id, _, _, _, Выручка) ],
        сумма_списка(Выручки, 0, Общая_выручка).

    соответвие_выручки(Кинотеатр_Название, Сумма_выручек) :-
        кинотеатр(Id, Кинотеатр_Название, _, _, _, _),
        Выручки = [ Выручка || показывают(Id, _, _, _, Выручка) ],
        сумма_списка(Выручки, 0, Общая_выручка),
        Сумма_выручек = Общая_выручка.

    найти_нужную_выручку_кинотетров(Тип_выручки) :-
        кинотеатр(Id, Название_кинотеатра, _, _, _, _),
        Тип_выручки = максимальная,
        максимальная_выручка_кинотеатра(Название_кинотеатра, Максимальная_выручка),
        write("Кинотеатр: ", Название_кинотеатра, " Выручка: ", Максимальная_выручка),
        nl,
        fail.

    найти_нужную_выручку_кинотетров(Тип_выручки) :-
        кинотеатр(Id, Название_кинотеатра, _, _, _, _),
        Тип_выручки = минимальная,
        минимальная_выручка_кинотеатра(Название_кинотеатра, Минимальная_выручка),
        write("Кинотеатр: ", Название_кинотеатра, " Выручка: ", Минимальная_выручка),
        nl,
        fail.

    максимальная_выручка_кинотеатра(Название_кинотеатра, Максимальная_выручка) :-
        Выручки =
            [ Выручка ||
                кинотеатр(Id, Название_кинотеатра, _, _, _, _),
                показывают(Id, _, _, _, Выручка)
            ],
        максимальное_значение_характеристики(Выручки, Максимальная_выручка).

    минимальная_выручка_кинотеатра(Название_кинотеатра, Минимальная_выручка) :-
        Выручки =
            [ Выручка ||
                кинотеатр(Id, Название_кинотеатра, _, _, _, _),
                показывают(Id, _, _, _, Выручка)
            ],
        минимальное_значение_характеристики(Выручки, Минимальная_выручка).

    максимальное_значение_характеристики([Этот_элемент | Список], Максимальное) :-
        максимальное_значение_характеристики(Список, Текущее_максимальное),
        Максимальное = math::max(Этот_элемент, Текущее_максимальное).

    максимальное_значение_характеристики([], 0).

    минимальное_значение_характеристики([Этот_элемент | Список], Минимальное) :-
        минимальное_значение_характеристики(Список, Текущее_минимальное),
        Минимальное = math::min(Этот_элемент, Текущее_минимальное).

    минимальное_значение_характеристики([], 99999999).

    поиск_кинотеатров_по_улице(Улица) :-
        кинотеатр(_, Название, Адрес, Телефон, Количество_мест, Статус),
        Где = string::search(Адрес, Улица, string::caseInsensitive),
        Где > 0,
        write("Кинотеатр: ", Название, " Адрес: ", Адрес, " Телефон: ", Телефон, " Количество мест: ", Количество_мест, " Статус: ", Статус),
        nl,
        fail.

    вывод_средней_выручки_кинотеатров() :-
        средняя_выручка_каждого_кинотеатра(Кинотеатр, Средняя_выручка),
        write("Кинотеатр: ", Кинотеатр, " Средняя выручка: ", Средняя_выручка),
        nl,
        fail.

    средняя_выручка_каждого_кинотеатра(Кинотеатр, Средняя_выручка) :-
        кинотеатр(Id, Кинотеатр, _, _, _, _),
        Выручки = [ Выручка || показывают(Id, _, _, _, Выручка) ],
        длина(Выручки, 0, Количество_сеансов),
        сумма_списка(Выручки, 0, Общая_выручка),
        Средняя_выручка = math::round(Общая_выручка / Количество_сеансов).

    длина([_ | Лист], Инкремент, Количество) :-
        длина(Лист, Инкремент + 1, Количество).
    длина([], Количество, Количество).

    сумма_списка([Этот_элемент | Лист], Сумма, Общая_сумма) :-
        Новая_сумма = Сумма + Этот_элемент,
        сумма_списка(Лист, Новая_сумма, Общая_сумма).
    сумма_списка([], Общая_сумма, Общая_сумма).

    адрес_кинотеатра_по_жанру(Адрес, Жанр) :-
        кинотеатр(Id, _, Адрес, _, _, _),
        показывают(Id, ФильмId, _, _, _),
        кинофильм(ФильмId, _, _, _, Жанр).

    кинотеатр_по_фильму(Название, Фильм) :-
        кинотеатр(Id, Название, _, _, _, _),
        показывают(Id, ФильмId, _, _, _),
        кинофильм(ФильмId, Фильм, _, _, _).

    адреса_кинотеатров_по_режиссеру_и_жанру(Адрес, Режиссер, Жанр) :-
        кинотеатр(Id, _, Адрес, _, _, _),
        показывают(Id, ФильмId, _, _, _),
        кинофильм(ФильмId, _, _, Режиссер, Жанр).

    адреса_открытых_или_закрытых_кинотеатров(Кинотеатр, Адрес, Статус) :-
        кинотеатр(_, Кинотеатр, Адрес, _, _, Статус).

    фильмы_в_кинотеатре(Название, Фильмы) :-
        кинотеатр(Id, Название, _, _, _, _),
        Фильмы = [ ФильмId || показывают(Id, ФильмId, _, _, _) ].

    количество_фильмов_автора(Режиссер, Количество) :-
        Фильмы = [ ФильмId || кинофильм(ФильмId, _, _, Режиссер, _) ],
        длина(Фильмы, 0, Количество).

    выручка_кинотеатра(Название_кинотеатра, Общая_выручка) :-
        кинотеатр(Id, Название_кинотеатра, _, _, _, _),
        Выручки = [ Выручка || показывают(Id, _, _, _, Выручка) ],
        сумма_списка(Выручки, 0, Общая_выручка).

    средняя_выручка_всех_кинотеатров(Средняя_выручка) :-
        Выручки =
            [ Выручка ||
                показывают(Id, _, _, _, Выручка),
                кинотеатр(Id, _, _, _, _, _)
            ],
        длина(Выручки, 0, Количество_кинотеатров),
        сумма_списка(Выручки, 0, Общая_выручка),
        Средняя_выручка = math::round(Общая_выручка / Количество_кинотеатров).

    печать_кинотеатров() :-
        write("\nСписок всех кинотеатров:\n"),
        кинотеатр(Id, Название, Адрес, Телефон, Количество_мест, Статус),
        write("ID: ", Id, " Название: ", Название, " Адрес: ", Адрес, " Телефон: ", Телефон, " Количество мест: ", Количество_мест, " Статус: ",
            Статус),
        nl,
        fail.

    печать_фильмов_по_кинотеатру(Id) :-
        показывают(Id, ФильмId, Дата, Время, _),
        кинофильм(ФильмId, Фильм, _, _, _),
        write("Фильм: ", Фильм, " Дата: ", Дата, " Время: ", Время),
        nl,
        fail.

    поиск_кинотеатра_по_названию(Название_кинотеатра) :-
        кинотеатр(Id, Название_кинотеатра, Адрес, Телефон, Количество_мест, Статус),
        write("Кинотеатр: ", Название_кинотеатра, " Адрес: ", Адрес, " Телефон: ", Телефон, " Количество мест: ", Количество_мест, " Статус: ",
            Статус),
        write("\nСписок фильмов в этом кинотеатре:\n"),
        печать_фильмов_по_кинотеатру(Id),
        nl,
        fail.

clauses
    run() :-
        consult('../facts.txt', factsDb),
        fail.

    run() :-
        write("Адреса открытых кинотеатров:\n"),
        адреса_открытых_или_закрытых_кинотеатров(Название, Адрес, открыт),
        write("Кинотеар: ", Название, " По адресу: ", Адрес, " Статус: ", открыт),
        nl,
        fail.

    run() :-
        фильмы_в_кинотеатре("Звездный", Фильмы),
        длина(Фильмы, 0, Количество),
        write("\nКоличество фильмов в кинотеатре Звездный: ", Количество),
        nl,
        fail.

    run() :-
        количество_фильмов_автора("Джордж Лукас", Количество),
        write("\nКоличество фильмов от Режиссера Джордж Лукас: ", Количество),
        nl,
        fail.

    run() :-
        выручка_кинотеатра("Звездный", Общая_выручка),
        write("\nОбщая выручка в кинотеатре Звездный: ", Общая_выручка),
        nl,
        fail.

    run() :-
        средняя_выручка_всех_кинотеатров(Средняя_выручка),
        write("\nСредняя выручка для всех кинотеатров: ", Средняя_выручка),
        nl,
        fail.

    run() :-
        печать_кинотеатров(),
        fail.

    run() :-
        write("\nПоиск кинотеатра и его фильмов по названию (ищем Звездный):\n"),
        поиск_кинотеатра_по_названию("Звездный"),
        fail.

    run() :-
        write("\nСредняя выручка всех кинотетров\n"),
        вывод_средней_выручки_кинотеатров(),
        fail.

    run() :-
        write("\nМаксимальная выручка кинотеатров:\n"),
        найти_нужную_выручку_кинотетров(максимальная),
        fail.

    run() :-
        write("\nМинимальная выручка кинотеатров:\n"),
        найти_нужную_выручку_кинотетров(минимальная),
        fail.

    run() :-
        найти_кинотеатры_по_значению(максимальная),
        fail.

    run() :-
        найти_кинотеатры_по_значению(минимальная),
        fail.

    run().

end implement main

goal
    console::runUtf8(main::run).
